"""This module is responsible for creating the latent space using traing and testing data.
"""

import numpy as np
import GPy
import dataSet.utilText as utilText


def genLatentSpaceTest(dataAsListTest, labelsAsListTest, iters, latentDim):
    """ This function generate Latent Space (by Gaussian Process Latent Variable Model) using training data and testing data.


    :param dataAsListTest: The samples data (data-type: map<class, list of dict[('points',array of couple),('dist',array of couple)]>
    :param labelsAsListTest:  The classification label (list of int)
    :param iters: Number of iterations to optimise the datas
    :param latentDim: dimension of the latent space
    :return:
    Mymodel (Gaussian Process Latent Variable Model):  the model generated by user's data.

    dataSamples (vector of numpyarray): the samples data in type vector.

    labelSamples (vector of numpyarray): the classification label of the samples data.
    """


    dataAsList = utilText.ReadFeatures()
    dataAsList.extend(dataAsListTest)
    labelsAsList = utilText.ReadLabels()
    zeroList=[0] * len(labelsAsListTest)
    labelsAsList.extend(zeroList)
    dataSamples = np.array(dataAsList)
    labelSamples = np.array(labelsAsList)

    #print dataSamples, dataSamples.shape
    #print labelSamples, labelSamples.shape

    #ker3 = GPy.kern.RBF(2, 0.1*0.1, .2)
    #Mymodel = GPy.models.gplvm.GPLVM(dataSamples, latentDim, kernel=GPy.kern.Matern32(latentDim))
    Mymodel = GPy.models.gplvm.GPLVM(dataSamples, latentDim, kernel = GPy.kern.RBF(2, ARD=True)+ GPy.kern.Bias(2) + GPy.kern.White(2))

    #print '*** Init ***'
    #print Mymodel
    Mymodel.optimize(max_iters=iters)
    #print '*** Optimized ***'
    #print Mymodel
    return Mymodel,dataSamples,labelSamples
    #Mymodel.Gaussian_noise.constrain_positive()
    #Mymodel.rbf.constrain_positive()
    #Mymodel.optimize()
    
    #construct data samples as vector of numpyarray
    #dataSamples = []
    
    #for x in dataAsList:
    #    dataSamples.append(np.asanyarray(x))

def genLatentSpace(iters, latentDim):
    """ This function generate Latent Space (by Gaussian Process Latent Variable Model) using training data.

    :param iters: Number of iterations to optimise the datas

    :param latentDim: Dimension of the latent space
    :return:
     Mymodel (Gaussian Process Latent Variable Model):  the model generated by user's data.

    dataSamples (vector of numpyarray): the samples data in type vector.

    labelSamples (vector of numpyarray): the classification label of the samples data.
    """

    dataAsList = utilText.ReadFeatures()
    labelsAsList = utilText.ReadLabels()
    dataSamples = np.array(dataAsList)
    labelSamples = np.array(labelsAsList)

    # print dataSamples, dataSamples.shape
    # print labelSamples, labelSamples.shape

    # ker3 = GPy.kern.RBF(2, 0.1*0.1, .2)
    #Mymodel = GPy.models.gplvm.GPLVM(dataSamples, latentDim, kernel=GPy.kern.sde_RBF(latentDim,0.01)+GPy.kern.sde_White(0.000001))
    Mymodel = GPy.models.gplvm.GPLVM(dataSamples, latentDim,kernel=GPy.kern.Matern32(latentDim)+GPy.kern.Bias(latentDim))

    # print '*** Init ***'
    # print Mymodel
    Mymodel.optimize(max_iters=iters)
    # print '*** Optimized ***'
    # print Mymodel
    return Mymodel, dataSamples, labelSamples
    # Mymodel.Gaussian_noise.constrain_positive()
    # Mymodel.rbf.constrain_positive()
    # Mymodel.optimize()

    # construct data samples as vector of numpyarray
    # dataSamples = []

    # for x in dataAsList:
    #    dataSamples.append(np.asanyarray(x))
